name: build-publish-scan-docker
on:
  push:
    branches:
      - main
permissions:
  actions: read # for detecting the Github Actions environment.
  id-token: write # for creating OIDC tokens for signing.
  packages: write
  contents: read
  
jobs:
  build-publish-docker: # Job name is updated
    runs-on: ubuntu-latest
    env:
      # --- UPDATED ENVIRONMENT VARIABLES ---
      DOCKER_REPO: 'manojk-oci-local' # Changed from codeninjas-proj-docker-local
      IMAGE_NAME: 'my-3rd-image:${{ github.run_number }}'
      JF_URL: https://hts2.jfrog.io
      #DOCKER_CLI_EXPERIMENTAL: enabled

    steps:
      # 1. Setup JFrog CLI and authenticate via OIDC
      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v4
        id: setup-cli
        env:
          JF_URL: https://hts2.jfrog.io
          JF_PROJECT: ${{ vars.JF_PROJECT }}
        with:
          oidc-provider-name: manojk-oci # Corrected indentation for 'with' block properties

      # 2. Verify OIDC Outputs (Optional debug step)
      - name: Verify OIDC Outputs
        run: |
          echo "OIDC User: ${{ steps.setup-cli.outputs.oidc-user }}"
          echo "OIDC Token available: ${{ steps.setup-cli.outputs.oidc-token != '' }}"
      
      # 3. Checkout the repository code
      - name: Checkout the repository
        uses: actions/checkout@v4
      
      # --- DOCKER BUILD & PUSH STEPS ---

      # 4. Set up QEMU (for multi-platform builds, kept for robustness)
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # 5. Authenticate Docker with OIDC Token
      - name: Authenticate Docker to JFrog Registry
        uses: docker/login-action@v3
        with:
          # FIX: Use only the base JFrog URL for the registry login check.
          registry: hts2-manojk-oci-local.jfrog.io 
          username: ${{ steps.setup-cli.outputs.oidc-user }}
          password: ${{ steps.setup-cli.outputs.oidc-token }}
      
      # 6. Setup Buildx Instance
      - name: Setup Buildx instance
        uses: docker/setup-buildx-action@v3
        with:
          use: true
          platforms: linux/amd64,linux/arm64
          install: true
      
      - name: Build and push OCI image with Buildx
        run: |
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            --tag hts2-manojk-oci-local.jfrog.io/${{ env.DOCKER_REPO }}/my-app:5.0 \
            --push \
            .

      - name: Build and Push Docker Image
        id: docker_build # Added an ID to reference the output
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: hts2-manojk-oci-local.jfrog.io/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}

      - name: Pull Docker Image for Local Scan
        run: |
          FULL_IMAGE_TAG="hts2-manojk-oci-local.jfrog.io/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}"
          echo "Pulling image: $FULL_IMAGE_TAG"
          # The image is pulled from Artifactory, using the authenticated Docker login
          docker pull $FULL_IMAGE_TAG
          
      #- name: Scan Docker Image
        # This command will now succeed because the image is locally available
       # run: |
        #  jf docker scan hts2-manojk-oci-local.jfrog.io/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}

      - name: Scan Docker Image
        run: |
          jf docker scan hts2-manojk-oci-local.jfrog.io/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}

      - name: Add Docker Image to Build Info
        run: |
          echo "Image digest is: ${{ steps.docker_build.outputs.digest }}"
          # Create a simple text file with the full image reference including the digest
          echo "hts2-manojk-oci-local.jfrog.io/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}@${{ steps.docker_build.outputs.digest }}" > image-details.txt
          # Use this file to add the image details to the JFrog build-info
          jf rt build-docker-create ${{ env.DOCKER_REPO }} --image-file image-details.txt

      - name: Publish Build Info
        run: |
          jf rt build-collect-env
          jf rt build-add-git
          jf rt build-publish

      - name: Scan Build
        run: |
          jf build-scan

      # 11. Write to workflow job summary (Kept your custom notes)
      - name: Write to workflow job summary
        run: |
          NOTE=$'>[!NOTE]\n>Frog Notes \n'
          TIP=$'>[!TIP]\n>Hello JFrog\n'
          IMPORTANT=$'>[!IMPORTANT]\n>Hello IMPORTANT NOTE\n'
          WARNING=$'>[!WARNING]\n>Hello WARNING NOTE\n'
          CAUTION=$'>[!CAUTION]\n>Hello CAUTION NOTE\n'
          echo "$NOTE" >> $GITHUB_STEP_SUMMARY
          echo "$TIP" >> $GITHUB_STEP_SUMMARY
          echo "$IMPORTANT" >> $GITHUB_STEP_SUMMARY
          echo "$WARNING" >> $GITHUB_STEP_SUMMARY
          echo "$CAUTION" >> $GITHUB_STEP_SUMMARY
